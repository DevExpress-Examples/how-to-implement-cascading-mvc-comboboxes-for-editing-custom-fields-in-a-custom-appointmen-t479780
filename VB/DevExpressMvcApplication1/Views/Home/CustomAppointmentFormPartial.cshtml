@using System.Web.UI.WebControls
@model DevExpressMvcApplication1.Models.ModelAppointment

@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();

    Action<MVCxFormLayoutItem> TextBoxSettingsMethod = i => {
        i.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
        var textBoxSettings = (TextBoxSettings)i.NestedExtensionSettings;
        textBoxSettings.ShowModelErrors = true;
        textBoxSettings.Properties.ValidationSettings.Display = Display.Dynamic;
        textBoxSettings.Width = Unit.Percentage(100);        
    };
    Action<MVCxFormLayoutItem> MemoSettingMethod = i => {
        i.ColSpan = 2;
        i.Height = Unit.Pixel(55);

        i.NestedExtensionType = FormLayoutNestedExtensionItemType.Memo;
        var memoSettings = (MemoSettings)i.NestedExtensionSettings;
        memoSettings.Properties.Rows = 2;
        memoSettings.Width = Unit.Percentage(100);
        memoSettings.Height = Unit.Percentage(100);
    };
    Action<MVCxFormLayoutItem> DateTimeSettingsMethod = i => {
        i.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
        var dateEditSettings = (DateEditSettings)i.NestedExtensionSettings;
        dateEditSettings.Properties.EditFormat = EditFormat.DateTime;
        dateEditSettings.ShowModelErrors = true;
        dateEditSettings.Properties.ValidationSettings.Display = Display.Dynamic;
        dateEditSettings.Width = Unit.Percentage(100);
    };
    Action<MVCxFormLayoutItem> SpinEditSettingsMethod = i => {
        i.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
        var spinEditSettings = (SpinEditSettings)i.NestedExtensionSettings;
        spinEditSettings.ShowModelErrors = true;
        spinEditSettings.Properties.DisplayFormatString = "{0:C}";
        spinEditSettings.Properties.ValidationSettings.Display = Display.Dynamic;
        spinEditSettings.Width = Unit.Percentage(100);
    };
}
@using(Html.BeginForm()) {
    @Html.DevExpress().FormLayout(settings => {
    settings.Name = "Schedule";
    settings.Width = Unit.Percentage(100);
    settings.ColCount = 2;

    settings.Items.Add(m => m.Subject, i => {
        i.Caption = "Appointment name";
        i.ColSpan = 2;
        TextBoxSettingsMethod(i);
    });
    
    settings.Items.Add(m => m.Location, TextBoxSettingsMethod);

    settings.Items.Add(m => m.OwnerId, item => {
        item.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
        ComboBoxSettings cbSettings = (ComboBoxSettings)item.NestedExtensionSettings;
        cbSettings.Properties.ValueField = "Value";
        cbSettings.Properties.TextField = "Text";
        cbSettings.Properties.ValueType = typeof(int);
        cbSettings.Properties.DataSource = ViewBag.ResourceDataSource;
        cbSettings.ClientEnabled = ViewBag.IsBaseAppointment;        
    });

    settings.Items.Add(m => m.StartTime, DateTimeSettingsMethod);
    settings.Items.Add(m => m.EndTime, DateTimeSettingsMethod);

    settings.Items.Add(m => m.HasReminder, item => {
        item.NestedExtensionType = FormLayoutNestedExtensionItemType.CheckBox;
        CheckBoxSettings cbSettings = (CheckBoxSettings)item.NestedExtensionSettings;
        cbSettings.Properties.ClientSideEvents.CheckedChanged = "OnHasReminderCheckedChanged";
    });

    settings.Items.Add(m => m.TimeBeforeStart, item => {
        item.SetNestedContent(() => {
            @Html.DevExpress().ComboBoxFor(m => m.TimeBeforeStart,
                cbSettings => {
                    cbSettings.Width = Unit.Percentage(100);
                    cbSettings.Properties.ValueType = typeof(TimeSpan);
                    cbSettings.Properties.ValueField = "Value";
                    cbSettings.Properties.TextField = "Text";
                    cbSettings.Properties.ClientSideEvents.Init = "OnTimeBeforeStartComboBoxInit";
                }).BindList(ViewBag.ReminderDataSource).Render();
        });
    });

    settings.Items.Add(m => m.Description, MemoSettingMethod);

    settings.Items.Add(item => {
        item.SetNestedContent(() => {
            Html.RenderPartial("ComboboxCompanyPartial", Model.CompanyID);
        });    
    });

    settings.Items.Add(item => {
        item.SetNestedContent(() => {
            Html.RenderPartial("ComboboxContactPartial", Model.ContactID);
        });
    });    
    
    settings.Items.Add(i => {
        i.ColSpan = 2;
        i.ShowCaption = DefaultBoolean.False;
        i.ClientVisible = ViewBag.IsBaseAppointment;        
    }).SetNestedContent(() => {
        Html.DevExpress().AppointmentRecurrenceForm(ViewBag.AppointmentRecurrenceFormSettings).Render();
    });

    settings.Items.Add(i => {
        i.ColSpan = 2;
        i.ShowCaption = DefaultBoolean.False;
        i.HorizontalAlign = FormLayoutHorizontalAlign.Center;
        i.ParentContainerStyle.Paddings.PaddingTop = Unit.Pixel(7);
    }).SetNestedContent(() => {
        ViewContext.Writer.Write("<div style=\"width:400px; text-align:center\">");
        Html.DevExpress().Button(btnSettings => {
            btnSettings.Name = "Apply";
            btnSettings.Text = "Ok";
            btnSettings.Width = Unit.Pixel(91);
            btnSettings.ClientSideEvents.Click = "OnAppointmentFormSave";
        }).Render();
        Html.DevExpress().Button(btnSettings => {
            btnSettings.Name = "Cancel";
            btnSettings.Text = "Cancel";
            btnSettings.Width = Unit.Pixel(91);
            btnSettings.Style[HtmlTextWriterStyle.Margin] = "0 10px";
            btnSettings.ClientSideEvents.Click = "OnAppointmentFormCancel";
        }).Render();
        Html.DevExpress().Button(btnSettings => {
            btnSettings.Name = "Delete";
            btnSettings.Text = "Delete";
            btnSettings.Width = Unit.Pixel(91);
            settings.Enabled = ViewBag.DeleteButtonEnabled;
            btnSettings.ClientSideEvents.Click = "OnAppointmentFormDelete";
        }).Render();
        ViewContext.Writer.Write("</div>");
    });

    settings.Items.Add(i => {
        i.ColSpan = 2;
        i.ShowCaption = DefaultBoolean.False;
    }).SetNestedContent(() => {
        Html.DevExpress().SchedulerStatusInfo(siSettings => {
            siSettings.Name = "schedulerStatusInfo";
            siSettings.Priority = 1;
            siSettings.SchedulerName = "scheduler";
        }).Render();
    });
}).GetHtml();}
